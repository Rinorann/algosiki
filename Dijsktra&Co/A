def read_list(n, m):
    adj_list = [[] for _ in range(n)]
    for _ in range(m):
        s, f, w = map(int, input().split())
        adj_list[s].append((f, w))
        adj_list[f].append((s, w))  # если граф неориентированный
    return adj_list
def dijkstra(adj_list, start_node, end_node):
    dist = {i:float('inf') for i in range(len(adj_list))}
    dist[start_node] = 0
    prev = [-1]*(len(adj_list))
    while dist:
        min_dist = min(dist.values())
        min_node = 0
        for key in dist:
            if dist[key] == min_dist:
                min_node = key
                break
        dist.pop(min_node)
        for neigh, weight in adj_list[min_node]:
            if neigh in dist:
                dist[neigh] = min(min_dist + weight, dist[neigh])
                prev[neigh] = min_node
    path = []
    current = end_node
    while current != -1:
        path.append(current)
        current = prev[current]
    path.reverse()
    return path
n, m, s, f = map(int, input().split())
adj_list = read_list(n, m)
print(*dijkstra(adj_list, s, f))
            
        